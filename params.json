{"name":"LightBus","tagline":"LightBus is a lightweight in-process bus","body":"#LightBus\r\n\r\n**LightBus** is a lightweight in-process bus, which pretty much makes it an implementation of the mediator pattern. **LightBus**, insipired by [NServiceBus](http://www.particular.net/) and the CQRS pattern, allows you to send messages (commands, events, queries) to registered recipients in a decoupled manner. Recipients, i.e. message handlers, are defined by marker interfaces and lets you encapsulate business operations in a single class, which in turn is registered and instantiated by an IoC container. \r\n\r\nTypical use case is directly behind your service boundary, for example server side behind a service interface like ASP.NET Web Api, ASP.NET MVC, Nancy, ServiceStack, WCF etc. \r\n\r\n**LightBus** is all async and uses the Task Parallell Library which means that you could use async/await on .NET 4.5. Still, **LightBus** targets .NET 4.0\r\n\r\n##Installation\r\n```PM> Install-Package LightBus```\r\n\r\n##Define a command\r\n```csharp\r\npublic class CreateCustomerCommand : ICommand\r\n{\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\n##Send a command\r\n```csharp\r\npublic class CustomerService : ICustomerService\r\n{\r\n    private readonly IBus _bus;\r\n\r\n    public CustomerService(IBus bus)\r\n    {\r\n        _bus = bus;\r\n    }\r\n\r\n    public async Task SendCommand(CreateCustomerCommand command)\r\n    {\r\n        await _bus.SendAsync(command);\r\n    }\r\n}\r\n```\r\n\r\n##Handle a command\r\n```csharp\r\npublic class CreateCustomerHandler : IHandleMessages<CreateCustomerCommand>\r\n{\r\n    public async Task HandleAsync(CreateCustomerCommand command)\r\n    {\r\n        await Task.Delay(100);\r\n        Console.WriteLine(\"Creating customer {0}.\", command.Name);\r\n    }\r\n}\r\n```\r\n\r\n##Define an event\r\n```csharp\r\npublic class CustomerCreatedEvent : IEvent\r\n{\r\n    public Guid CustomerId { get; set; }\r\n}\r\n```\r\n\r\n##Publish an event\r\n```csharp\r\npublic class CreateCustomerHandler : IHandleMessages<CreateCustomerCommand>\r\n{\r\n    private readonly IBus _bus;\r\n\r\n    public CreateCustomerHandler(IBus bus)\r\n    {\r\n        _bus = bus;\r\n    }\r\n\r\n    public async Task HandleAsync(CreateCustomerCommand command)\r\n    {\r\n        Console.WriteLine(\"Creating customer {0}.\", command.Name);\r\n        await _bus.PublishAsync(new CustomerCreatedEvent { CustomerId = Guid.NewGuid() });\r\n    }\r\n}\r\n```\r\n\r\n##Handle an event\r\n```csharp\r\npublic class CustomerCreatedHandler : IHandleMessages<CustomerCreatedEvent>\r\n{\r\n    public async Task HandleAsync(CustomerCreatedEvent command)\r\n    {\r\n        await Task.Delay(50);\r\n        Console.WriteLine(\"Customer with id {0} created.\", command.CustomerId);\r\n    }\r\n}\r\n```\r\n\r\n##Define a query\r\n```csharp\r\npublic class GetAllCustomersQuery : IQuery<GetAllCustomersResponse>\r\n{\r\n}\r\n```\r\n\r\n##Define a query response\r\n```csharp\r\npublic class GetAllCustomersResponse\r\n{\r\n    public List<Customer> Cutomers { get; set; }\r\n}\r\n```\r\n\r\n##Send a query\r\n```csharp\r\npublic async Task<GetAllCustomersResponse> SendQuery(GetAllCustomersQuery query)\r\n{\r\n    return await _bus.SendAsync(query);\r\n}\r\n```\r\n\r\n##Handle a query\r\n```csharp\r\npublic class GetAllCustomersHandler : IHandleQueries<GetAllCustomersQuery, GetAllCustomersResponse>\r\n{\r\n    public async Task<GetAllCustomersResponse> HandleAsync(GetAllCustomersQuery query)\r\n    {\r\n        await Task.Delay(50);\r\n        return new GetAllCustomersResponse\r\n        {\r\n            Cutomers = Db.Customers\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n##Set up an IoC container\r\n###[LightInject](http://www.lightinject.net/) setup\r\n```csharp\r\nvar serviceContainer = new ServiceContainer();\r\n//Register all types that implements IHandleMessages and IHandleQueries\r\nserviceContainer.RegisterAssembly(Assembly.GetExecutingAssembly(), (serviceType, implementingType) => serviceType.IsGenericType && (serviceType.GetGenericTypeDefinition() == typeof(IHandleMessages<>) || serviceType.GetGenericTypeDefinition() == typeof(IHandleQueries<,>)));\r\n\r\n//Register the Bus\r\nserviceContainer.Register<IBus>(sf => new Bus(sf.GetAllInstances), new PerContainerLifetime());\r\n```\r\n\r\n##Examples\r\nSee the [LightBus.Examples](https://github.com/kvarv/LightBus.Examples) repository\r\n","google":"UA-49181110-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
